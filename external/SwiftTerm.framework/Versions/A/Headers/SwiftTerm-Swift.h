#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef SWIFTTERM_SWIFT_H
#define SWIFTTERM_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppKit;
@import CoreFoundation;
@import Darwin;
@import Foundation;
@import ObjectiveC;
@import sys_types;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SwiftTerm",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// This class provides the capabilities to launch a local Unix process, and connect it to a <code>Terminal</code>
/// class or subclass.
/// The <code>MacLocalTerminalView</code> is an example of this, it is a subclass of the
/// <code>MacTerminalView</code> NSView, and it connects that view to the local system, providing a complete
/// terminal emulator connected to running local commands.
/// When you create an instance of <code>LocalProcess</code>, you provide a delegate that is used to notify
/// your application when data is received from the lcoal process, to request the desired window size
/// that you would like to give to the child process, and when the process terminates.
/// Once you create this instance, you can start a child process by calling the <code>startProcess</code> method
/// which will start the process.   You can then send data to this underlying process using the
/// <code>send(data:)</code> method, and you will receive the output on the provided delegate with the
/// <code>dataReceived(slice:)</code> method.
/// Received data is dispatched via the queue that you provide in the LocalProcess constructor, if none
/// is provided, this will default to <code>DispatchQueue.main</code>.  Generally, this is a good default, but if you
/// have your own main loop or a different dispatching system, you will need to pass your own (for example,
/// the <code>HeadlessTerminal</code> implementation in the test suite does this.
/// The <code>terminate</code> call will send the <code>SIGTERM</code> signal to the child process.
/// The <code>shellPid</code> property has the PID for the child process, and this can be used to send signals
/// to it using the <code>kill</code> API.
/// The <code>childfd</code> property has the Unix file descriptor for the primary side of the created pseudo-terminal.
SWIFT_CLASS("_TtC9SwiftTerm12LocalProcess")
@interface LocalProcess : NSObject
@property (nonatomic, readonly) pid_t shellPid;
/// Indicates if the child process is currently running
@property (nonatomic, readonly) BOOL running;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSFont;
@class NSCoder;
@class NSEvent;
@class NSAttributedString;
@protocol NSValidatedUserInterfaceItem;

/// TerminalView provides an AppKit front-end to the <code>Terminal</code> termininal emulator.
/// It is up to a subclass to either wire the terminal emulator to a remote terminal
/// via some socket, to an application that wants to run with terminal emulation, or
/// wiring this up to a pseudo-terminal.
/// Users are notified of interesting events in their implementation of the <code>TerminalViewDelegate</code>
/// methods - an instance must be provided to the constructor of <code>TerminalView</code>.
/// Developers might want to surface UIs for <code>optionAsMetaKey</code> and <code>allowMouseReporting</code> in
/// their application.  They both default to true, but this means that Option-Letter is hijacked for
/// terminal purposes to send the sequence ESC-Letter, instead of the macOS specific character and
/// means that when mouse-aware applications are running, they hijack the normal selection process.
/// Call the <code>getTerminal</code> method to get a reference to the underlying <code>Terminal</code> that backs this
/// view.
/// Use the <code>configureNativeColors()</code> to set the defaults colors for the view to match the OS
/// defaults, otherwise, this uses its own set of defaults colors.
SWIFT_CLASS("_TtC9SwiftTerm12TerminalView")
@interface TerminalView : NSView <NSTextInputClient, NSUserInterfaceValidations>
/// The font to use to render the terminal
@property (nonatomic, strong) NSFont * _Nonnull font;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillDraw;
- (void)drawRect:(NSRect)dirtyRect;
- (void)cursorUpdate:(NSEvent * _Nonnull)event;
@property (nonatomic) NSRect frame;
- (void)setFrameSize:(NSSize)newSize;
- (void)resizeSubviewsWithOldSize:(NSSize)oldSize;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL acceptsFirstResponder;
- (void)flagsChanged:(NSEvent * _Nonnull)event;
- (void)mouseExited:(NSEvent * _Nonnull)event;
- (void)keyDown:(NSEvent * _Nonnull)event;
- (void)doCommandBySelector:(SEL _Nonnull)selector;
- (void)insertText:(id _Nonnull)string replacementRange:(NSRange)replacementRange;
- (void)setMarkedText:(id _Nonnull)string selectedRange:(NSRange)selectedRange replacementRange:(NSRange)replacementRange;
- (void)unmarkText;
- (NSRange)selectedRange SWIFT_WARN_UNUSED_RESULT;
- (NSRange)markedRange SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasMarkedText SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)attributedSubstringForProposedRange:(NSRange)range actualRange:(NSRangePointer _Nullable)actualRange SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSAttributedStringKey> * _Nonnull)validAttributesForMarkedText SWIFT_WARN_UNUSED_RESULT;
- (NSRect)firstRectForCharacterRange:(NSRange)range actualRange:(NSRangePointer _Nullable)actualRange SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)characterIndexForPoint:(NSPoint)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)validateUserInterfaceItem:(id <NSValidatedUserInterfaceItem> _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (void)paste:(id _Nonnull)sender;
- (void)copy:(id _Nonnull)sender;
- (void)selectAll:(id _Nullable)sender;
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)mouseDragged:(NSEvent * _Nonnull)event;
- (void)mouseMoved:(NSEvent * _Nonnull)event;
- (void)scrollWheel:(NSEvent * _Nonnull)event;
- (void)resetCursorRects;
@end

@protocol LocalProcessTerminalViewDelegate;
@class NSString;

/// <code>LocalProcessTerminalView</code> is an AppKit NSView that can be used to host a local process
/// the process is launched inside a pseudo-terminal.
/// Call the <code>startProcess</code> to launch the underlying process inside a pseudo terminal.
/// Generally, for the <code>LocalProcessTerminalView</code> to be useful, you will want to disable the sandbox
/// for your application, otherwise the underlying shell will not have access to much - not the majority of
/// commands, not assorted places on the file systems and so on.   For this, you need to disable for your
/// target in “Signing and Capabilities” the sandbox entirely.
/// Note: instances of <code>LocalProcessTerminalView</code> will set the <code>TerminalView</code>’s <code>delegate</code>
/// property and capture and consume the messages.   The messages that are most likely needed for
/// consumer applications are reposted to the <code>LocalProcessTerminalViewDelegate</code> in
/// <code>processDelegate</code>.   If you override the <code>delegate</code> directly, you might inadvertently break
/// the internal working of <code>LocalProcessTerminalView</code>.   If you must change the <code>delegate</code>
/// make sure that you proxy the values in your implementation to the values set after initializing this instance.
/// If you want additional control over the delegate methods implemented in this class, you can
/// subclass this and override the methods
SWIFT_CLASS("_TtC9SwiftTerm24LocalProcessTerminalView")
@interface LocalProcessTerminalView : TerminalView
@property (nonatomic, strong) LocalProcess * _Null_unspecified process;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The <code>processDelegate</code> is used to deliver messages and information relevant t
@property (nonatomic, weak) id <LocalProcessTerminalViewDelegate> _Nullable processDelegate;
/// This method is invoked to notify the client of the new columsn and rows that have been set by the UI
- (void)sizeChangedWithSource:(TerminalView * _Nonnull)source newCols:(NSInteger)newCols newRows:(NSInteger)newRows;
/// Invoke this method to notify the processDelegate of the new title for the terminal window
- (void)setTerminalTitleWithSource:(TerminalView * _Nonnull)source title:(NSString * _Nonnull)title;
- (void)hostCurrentDirectoryUpdateWithSource:(TerminalView * _Nonnull)source directory:(NSString * _Nullable)directory;
/// Use this method to toggle the logging of data coming from the host, or pass nil to stop
- (void)setHostLoggingWithDirectory:(NSString * _Nonnull)directory;
/// Launches a child process inside a pseudo-terminal.
/// \param executable The executable to launch inside the pseudo terminal, defaults to /bin/bash
///
/// \param args an array of strings that is passed as the arguments to the underlying process
///
/// \param environment an array of environment variables to pass to the child process, if this is null, this picks a good set of defaults from <code>Terminal.getEnvironmentVariables</code>.
///
/// \param execName If provided, this is used as the Unix argv[0] parameter, otherwise, the executable is used as the args [0], this is used when the intent is to set a different process name than the file that backs it.
///
- (void)startProcessWithExecutable:(NSString * _Nonnull)executable args:(NSArray<NSString *> * _Nonnull)args environment:(NSArray<NSString *> * _Nullable)environment execName:(NSString * _Nullable)execName;
/// Implements the LocalProcessDelegate method.
- (void)processTerminated:(LocalProcess * _Nonnull)source exitCode:(int32_t)exitCode;
/// Implements the LocalProcessDelegate.getWindowSize method
- (struct winsize)getWindowSize SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate for the <code>LocalProcessTerminalView</code> class that is used to
/// notify the user of process-related changes.
SWIFT_PROTOCOL("_TtP9SwiftTerm32LocalProcessTerminalViewDelegate_")
@protocol LocalProcessTerminalViewDelegate
/// This method is invoked to notify that the terminal has been resized to the specified number of columns and rows
/// the user interface code might try to adjut the containing scroll view, or if it is a toplevel window, the window itself
/// \param source the sending instance
///
/// \param newCols the new number of columns that should be shown
///
/// \param newRow the new number of rows that should be shown
///
- (void)sizeChangedWithSource:(LocalProcessTerminalView * _Nonnull)source newCols:(NSInteger)newCols newRows:(NSInteger)newRows;
/// This method is invoked when the title of the terminal window should be updated to the provided title
/// \param source the sending instance
///
/// \param title the desired title
///
- (void)setTerminalTitleWithSource:(LocalProcessTerminalView * _Nonnull)source title:(NSString * _Nonnull)title;
/// Invoked when the OSC command 7 for “current directory has changed” command is sent
/// \param source the sending instance
///
/// \param directory the new working directory
///
- (void)hostCurrentDirectoryUpdateWithSource:(TerminalView * _Nonnull)source directory:(NSString * _Nullable)directory;
/// This method will be invoked when the child process started by <code>startProcess</code> has terminated.
/// \param source the local process that terminated
///
/// \param exitCode the exit code returned by the process, or nil if this was an error caused during the IO reading/writing
///
- (void)processTerminatedWithSource:(TerminalView * _Nonnull)source exitCode:(int32_t)exitCode;
@end







SWIFT_CLASS("_TtC9SwiftTerm17TerminalDebugView")
@interface TerminalDebugView : NSView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(NSRect)dirtyRect;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef SWIFTTERM_SWIFT_H
#define SWIFTTERM_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppKit;
@import CoreFoundation;
@import Darwin;
@import Foundation;
@import ObjectiveC;
@import sys_types;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SwiftTerm",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// This class provides the capabilities to launch a local Unix process, and connect it to a <code>Terminal</code>
/// class or subclass.
/// The <code>MacLocalTerminalView</code> is an example of this, it is a subclass of the
/// <code>MacTerminalView</code> NSView, and it connects that view to the local system, providing a complete
/// terminal emulator connected to running local commands.
/// When you create an instance of <code>LocalProcess</code>, you provide a delegate that is used to notify
/// your application when data is received from the lcoal process, to request the desired window size
/// that you would like to give to the child process, and when the process terminates.
/// Once you create this instance, you can start a child process by calling the <code>startProcess</code> method
/// which will start the process.   You can then send data to this underlying process using the
/// <code>send(data:)</code> method, and you will receive the output on the provided delegate with the
/// <code>dataReceived(slice:)</code> method.
/// Received data is dispatched via the queue that you provide in the LocalProcess constructor, if none
/// is provided, this will default to <code>DispatchQueue.main</code>.  Generally, this is a good default, but if you
/// have your own main loop or a different dispatching system, you will need to pass your own (for example,
/// the <code>HeadlessTerminal</code> implementation in the test suite does this.
/// The <code>terminate</code> call will send the <code>SIGTERM</code> signal to the child process.
/// The <code>shellPid</code> property has the PID for the child process, and this can be used to send signals
/// to it using the <code>kill</code> API.
/// The <code>childfd</code> property has the Unix file descriptor for the primary side of the created pseudo-terminal.
SWIFT_CLASS("_TtC9SwiftTerm12LocalProcess")
@interface LocalProcess : NSObject
@property (nonatomic, readonly) pid_t shellPid;
/// Indicates if the child process is currently running
@property (nonatomic, readonly) BOOL running;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSFont;
@class NSCoder;
@class NSEvent;
@class NSAttributedString;
@protocol NSValidatedUserInterfaceItem;

/// TerminalView provides an AppKit front-end to the <code>Terminal</code> termininal emulator.
/// It is up to a subclass to either wire the terminal emulator to a remote terminal
/// via some socket, to an application that wants to run with terminal emulation, or
/// wiring this up to a pseudo-terminal.
/// Users are notified of interesting events in their implementation of the <code>TerminalViewDelegate</code>
/// methods - an instance must be provided to the constructor of <code>TerminalView</code>.
/// Developers might want to surface UIs for <code>optionAsMetaKey</code> and <code>allowMouseReporting</code> in
/// their application.  They both default to true, but this means that Option-Letter is hijacked for
/// terminal purposes to send the sequence ESC-Letter, instead of the macOS specific character and
/// means that when mouse-aware applications are running, they hijack the normal selection process.
/// Call the <code>getTerminal</code> method to get a reference to the underlying <code>Terminal</code> that backs this
/// view.
/// Use the <code>configureNativeColors()</code> to set the defaults colors for the view to match the OS
/// defaults, otherwise, this uses its own set of defaults colors.
SWIFT_CLASS("_TtC9SwiftTerm12TerminalView")
@interface TerminalView : NSView <NSTextInputClient, NSUserInterfaceValidations>
/// The font to use to render the terminal
@property (nonatomic, strong) NSFont * _Nonnull font;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillDraw;
- (void)drawRect:(NSRect)dirtyRect;
- (void)cursorUpdate:(NSEvent * _Nonnull)event;
@property (nonatomic) NSRect frame;
- (void)setFrameSize:(NSSize)newSize;
- (void)resizeSubviewsWithOldSize:(NSSize)oldSize;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL acceptsFirstResponder;
- (void)flagsChanged:(NSEvent * _Nonnull)event;
- (void)mouseExited:(NSEvent * _Nonnull)event;
- (void)keyDown:(NSEvent * _Nonnull)event;
- (void)doCommandBySelector:(SEL _Nonnull)selector;
- (void)insertText:(id _Nonnull)string replacementRange:(NSRange)replacementRange;
- (void)setMarkedText:(id _Nonnull)string selectedRange:(NSRange)selectedRange replacementRange:(NSRange)replacementRange;
- (void)unmarkText;
- (NSRange)selectedRange SWIFT_WARN_UNUSED_RESULT;
- (NSRange)markedRange SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasMarkedText SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)attributedSubstringForProposedRange:(NSRange)range actualRange:(NSRangePointer _Nullable)actualRange SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSAttributedStringKey> * _Nonnull)validAttributesForMarkedText SWIFT_WARN_UNUSED_RESULT;
- (NSRect)firstRectForCharacterRange:(NSRange)range actualRange:(NSRangePointer _Nullable)actualRange SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)characterIndexForPoint:(NSPoint)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)validateUserInterfaceItem:(id <NSValidatedUserInterfaceItem> _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (void)paste:(id _Nonnull)sender;
- (void)copy:(id _Nonnull)sender;
- (void)selectAll:(id _Nullable)sender;
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)mouseDragged:(NSEvent * _Nonnull)event;
- (void)mouseMoved:(NSEvent * _Nonnull)event;
- (void)scrollWheel:(NSEvent * _Nonnull)event;
- (void)resetCursorRects;
@end

@protocol LocalProcessTerminalViewDelegate;
@class NSString;

/// <code>LocalProcessTerminalView</code> is an AppKit NSView that can be used to host a local process
/// the process is launched inside a pseudo-terminal.
/// Call the <code>startProcess</code> to launch the underlying process inside a pseudo terminal.
/// Generally, for the <code>LocalProcessTerminalView</code> to be useful, you will want to disable the sandbox
/// for your application, otherwise the underlying shell will not have access to much - not the majority of
/// commands, not assorted places on the file systems and so on.   For this, you need to disable for your
/// target in “Signing and Capabilities” the sandbox entirely.
/// Note: instances of <code>LocalProcessTerminalView</code> will set the <code>TerminalView</code>’s <code>delegate</code>
/// property and capture and consume the messages.   The messages that are most likely needed for
/// consumer applications are reposted to the <code>LocalProcessTerminalViewDelegate</code> in
/// <code>processDelegate</code>.   If you override the <code>delegate</code> directly, you might inadvertently break
/// the internal working of <code>LocalProcessTerminalView</code>.   If you must change the <code>delegate</code>
/// make sure that you proxy the values in your implementation to the values set after initializing this instance.
/// If you want additional control over the delegate methods implemented in this class, you can
/// subclass this and override the methods
SWIFT_CLASS("_TtC9SwiftTerm24LocalProcessTerminalView")
@interface LocalProcessTerminalView : TerminalView
@property (nonatomic, strong) LocalProcess * _Null_unspecified process;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The <code>processDelegate</code> is used to deliver messages and information relevant t
@property (nonatomic, weak) id <LocalProcessTerminalViewDelegate> _Nullable processDelegate;
/// This method is invoked to notify the client of the new columsn and rows that have been set by the UI
- (void)sizeChangedWithSource:(TerminalView * _Nonnull)source newCols:(NSInteger)newCols newRows:(NSInteger)newRows;
/// Invoke this method to notify the processDelegate of the new title for the terminal window
- (void)setTerminalTitleWithSource:(TerminalView * _Nonnull)source title:(NSString * _Nonnull)title;
- (void)hostCurrentDirectoryUpdateWithSource:(TerminalView * _Nonnull)source directory:(NSString * _Nullable)directory;
/// Use this method to toggle the logging of data coming from the host, or pass nil to stop
- (void)setHostLoggingWithDirectory:(NSString * _Nonnull)directory;
/// Launches a child process inside a pseudo-terminal.
/// \param executable The executable to launch inside the pseudo terminal, defaults to /bin/bash
///
/// \param args an array of strings that is passed as the arguments to the underlying process
///
/// \param environment an array of environment variables to pass to the child process, if this is null, this picks a good set of defaults from <code>Terminal.getEnvironmentVariables</code>.
///
/// \param execName If provided, this is used as the Unix argv[0] parameter, otherwise, the executable is used as the args [0], this is used when the intent is to set a different process name than the file that backs it.
///
- (void)startProcessWithExecutable:(NSString * _Nonnull)executable args:(NSArray<NSString *> * _Nonnull)args environment:(NSArray<NSString *> * _Nullable)environment execName:(NSString * _Nullable)execName;
/// Implements the LocalProcessDelegate method.
- (void)processTerminated:(LocalProcess * _Nonnull)source exitCode:(int32_t)exitCode;
/// Implements the LocalProcessDelegate.getWindowSize method
- (struct winsize)getWindowSize SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate for the <code>LocalProcessTerminalView</code> class that is used to
/// notify the user of process-related changes.
SWIFT_PROTOCOL("_TtP9SwiftTerm32LocalProcessTerminalViewDelegate_")
@protocol LocalProcessTerminalViewDelegate
/// This method is invoked to notify that the terminal has been resized to the specified number of columns and rows
/// the user interface code might try to adjut the containing scroll view, or if it is a toplevel window, the window itself
/// \param source the sending instance
///
/// \param newCols the new number of columns that should be shown
///
/// \param newRow the new number of rows that should be shown
///
- (void)sizeChangedWithSource:(LocalProcessTerminalView * _Nonnull)source newCols:(NSInteger)newCols newRows:(NSInteger)newRows;
/// This method is invoked when the title of the terminal window should be updated to the provided title
/// \param source the sending instance
///
/// \param title the desired title
///
- (void)setTerminalTitleWithSource:(LocalProcessTerminalView * _Nonnull)source title:(NSString * _Nonnull)title;
/// Invoked when the OSC command 7 for “current directory has changed” command is sent
/// \param source the sending instance
///
/// \param directory the new working directory
///
- (void)hostCurrentDirectoryUpdateWithSource:(TerminalView * _Nonnull)source directory:(NSString * _Nullable)directory;
/// This method will be invoked when the child process started by <code>startProcess</code> has terminated.
/// \param source the local process that terminated
///
/// \param exitCode the exit code returned by the process, or nil if this was an error caused during the IO reading/writing
///
- (void)processTerminatedWithSource:(TerminalView * _Nonnull)source exitCode:(int32_t)exitCode;
@end







SWIFT_CLASS("_TtC9SwiftTerm17TerminalDebugView")
@interface TerminalDebugView : NSView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(NSRect)dirtyRect;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
